/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.api;

import com.twitter.clientlib.ApiCallback;
import com.twitter.clientlib.ApiClient;
import com.twitter.clientlib.auth.*;
import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.ApiResponse;
import com.twitter.clientlib.Configuration;
import com.twitter.clientlib.Pair;
import com.twitter.clientlib.ProgressRequestBody;
import com.twitter.clientlib.ProgressResponseBody;

import com.github.scribejava.core.model.OAuth2AccessToken;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.util.HashSet;


import com.twitter.clientlib.model.CreateDmConversationRequest;
import com.twitter.clientlib.model.CreateDmEventResponse;
import com.twitter.clientlib.model.CreateMessageRequest;
import com.twitter.clientlib.model.Error;
import com.twitter.clientlib.model.Get2DmConversationsIdDmEventsResponse;
import com.twitter.clientlib.model.Get2DmConversationsWithParticipantIdDmEventsResponse;
import com.twitter.clientlib.model.Get2DmEventsResponse;
import com.twitter.clientlib.model.Problem;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Arrays;
import java.io.InputStream;
import javax.ws.rs.core.GenericType;

import org.apache.commons.lang3.StringUtils;

public class DirectMessagesApi extends ApiCommon {

    private okhttp3.Call dmConversationByIdEventIdCreateCall(CreateMessageRequest createMessageRequest, String dmConversationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createMessageRequest;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/{dm_conversation_id}/messages"
            .replaceAll("\\{" + "dm_conversation_id" + "\\}", localVarApiClient.escapeString(dmConversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, reduceAuthNames(localVarAuthNames), _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dmConversationByIdEventIdCreateValidateBeforeCall(CreateMessageRequest createMessageRequest, String dmConversationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dmConversationId' is set
        if (dmConversationId == null) {
            throw new ApiException("Missing the required parameter 'dmConversationId' when calling dmConversationByIdEventIdCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dmConversationByIdEventIdCreateCall(createMessageRequest, dmConversationId, _callback);
        return localVarCall;

    }


    private ApiResponse<CreateDmEventResponse> dmConversationByIdEventIdCreateWithHttpInfo(CreateMessageRequest createMessageRequest, String dmConversationId) throws ApiException {
        okhttp3.Call localVarCall = dmConversationByIdEventIdCreateValidateBeforeCall(createMessageRequest, dmConversationId, null);
        try {
            Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<com.twitter.clientlib.model.ProblemOrError>(){}.getType()));
            throw e;
        }
    }

    private okhttp3.Call dmConversationByIdEventIdCreateAsync(CreateMessageRequest createMessageRequest, String dmConversationId, final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dmConversationByIdEventIdCreateValidateBeforeCall(createMessageRequest, dmConversationId, _callback);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdmConversationByIdEventIdCreateRequest {
        private final String dmConversationId;
        private CreateMessageRequest createMessageRequest;
        
        

        private APIdmConversationByIdEventIdCreateRequest(String dmConversationId) {
            this.dmConversationId = dmConversationId;
        }

        /**
         * Set createMessageRequest
         * @param createMessageRequest  (optional)
         * @return APIdmConversationByIdEventIdCreateRequest
         */
        public APIdmConversationByIdEventIdCreateRequest createMessageRequest(CreateMessageRequest createMessageRequest) {
            this.createMessageRequest = createMessageRequest;
            return this;
        }

        /**
         * Build call for dmConversationByIdEventIdCreate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return dmConversationByIdEventIdCreateCall(createMessageRequest, dmConversationId, _callback);
        }

        /**
         * Execute dmConversationByIdEventIdCreate request
         * @return CreateDmEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateDmEventResponse execute() throws ApiException {
            
            ApiResponse<CreateDmEventResponse> localVarResp = dmConversationByIdEventIdCreateWithHttpInfo(createMessageRequest, dmConversationId);
            return localVarResp.getData();
        }
        /**
        * Calls the API using a retry mechanism to handle rate limits errors.
        *
        */
        public CreateDmEventResponse  execute(Integer retries) throws ApiException {
          CreateDmEventResponse localVarResp;
            try{
          localVarResp = execute();
          } catch (ApiException e) {
            if(handleRateLimit(e, retries)) {
              return execute(retries - 1);
            } else {
              throw e;
            }
          }
          return localVarResp;
        }
        /**
         * Execute dmConversationByIdEventIdCreate request with HTTP info returned
         * @return ApiResponse&lt;CreateDmEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */

            public ApiResponse<CreateDmEventResponse> executeWithHttpInfo() throws ApiException {
              return dmConversationByIdEventIdCreateWithHttpInfo(createMessageRequest, dmConversationId);
            }
        /**
         * Execute dmConversationByIdEventIdCreate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {
            return dmConversationByIdEventIdCreateAsync(createMessageRequest, dmConversationId, _callback);
        }
    }

    /**
     * Send a new message to a DM Conversation
     * Creates a new message for a DM Conversation specified by DM Conversation ID
     * @param dmConversationId The DM Conversation ID. (required)
     * @return APIdmConversationByIdEventIdCreateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdmConversationByIdEventIdCreateRequest dmConversationByIdEventIdCreate(String dmConversationId) {
        return new APIdmConversationByIdEventIdCreateRequest(dmConversationId);
    }
    private okhttp3.Call dmConversationIdCreateCall(CreateDmConversationRequest createDmConversationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createDmConversationRequest;

        // create path and map variables
        String localVarPath = "/2/dm_conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, reduceAuthNames(localVarAuthNames), _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dmConversationIdCreateValidateBeforeCall(CreateDmConversationRequest createDmConversationRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dmConversationIdCreateCall(createDmConversationRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<CreateDmEventResponse> dmConversationIdCreateWithHttpInfo(CreateDmConversationRequest createDmConversationRequest) throws ApiException {
        okhttp3.Call localVarCall = dmConversationIdCreateValidateBeforeCall(createDmConversationRequest, null);
        try {
            Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<com.twitter.clientlib.model.ProblemOrError>(){}.getType()));
            throw e;
        }
    }

    private okhttp3.Call dmConversationIdCreateAsync(CreateDmConversationRequest createDmConversationRequest, final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dmConversationIdCreateValidateBeforeCall(createDmConversationRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdmConversationIdCreateRequest {
        private CreateDmConversationRequest createDmConversationRequest;
        
        

        private APIdmConversationIdCreateRequest() {
        }

        /**
         * Set createDmConversationRequest
         * @param createDmConversationRequest  (optional)
         * @return APIdmConversationIdCreateRequest
         */
        public APIdmConversationIdCreateRequest createDmConversationRequest(CreateDmConversationRequest createDmConversationRequest) {
            this.createDmConversationRequest = createDmConversationRequest;
            return this;
        }

        /**
         * Build call for dmConversationIdCreate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return dmConversationIdCreateCall(createDmConversationRequest, _callback);
        }

        /**
         * Execute dmConversationIdCreate request
         * @return CreateDmEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateDmEventResponse execute() throws ApiException {
            
            ApiResponse<CreateDmEventResponse> localVarResp = dmConversationIdCreateWithHttpInfo(createDmConversationRequest);
            return localVarResp.getData();
        }
        /**
        * Calls the API using a retry mechanism to handle rate limits errors.
        *
        */
        public CreateDmEventResponse  execute(Integer retries) throws ApiException {
          CreateDmEventResponse localVarResp;
            try{
          localVarResp = execute();
          } catch (ApiException e) {
            if(handleRateLimit(e, retries)) {
              return execute(retries - 1);
            } else {
              throw e;
            }
          }
          return localVarResp;
        }
        /**
         * Execute dmConversationIdCreate request with HTTP info returned
         * @return ApiResponse&lt;CreateDmEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */

            public ApiResponse<CreateDmEventResponse> executeWithHttpInfo() throws ApiException {
              return dmConversationIdCreateWithHttpInfo(createDmConversationRequest);
            }
        /**
         * Execute dmConversationIdCreate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {
            return dmConversationIdCreateAsync(createDmConversationRequest, _callback);
        }
    }

    /**
     * Create a new DM Conversation
     * Creates a new DM Conversation.
     * @return APIdmConversationIdCreateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdmConversationIdCreateRequest dmConversationIdCreate() {
        return new APIdmConversationIdCreateRequest();
    }
    private okhttp3.Call dmConversationWithUserEventIdCreateCall(CreateMessageRequest createMessageRequest, String participantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createMessageRequest;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/with/{participant_id}/messages"
            .replaceAll("\\{" + "participant_id" + "\\}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, reduceAuthNames(localVarAuthNames), _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dmConversationWithUserEventIdCreateValidateBeforeCall(CreateMessageRequest createMessageRequest, String participantId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling dmConversationWithUserEventIdCreate(Async)");
        }
        

        okhttp3.Call localVarCall = dmConversationWithUserEventIdCreateCall(createMessageRequest, participantId, _callback);
        return localVarCall;

    }


    private ApiResponse<CreateDmEventResponse> dmConversationWithUserEventIdCreateWithHttpInfo(CreateMessageRequest createMessageRequest, String participantId) throws ApiException {
        okhttp3.Call localVarCall = dmConversationWithUserEventIdCreateValidateBeforeCall(createMessageRequest, participantId, null);
        try {
            Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<com.twitter.clientlib.model.ProblemOrError>(){}.getType()));
            throw e;
        }
    }

    private okhttp3.Call dmConversationWithUserEventIdCreateAsync(CreateMessageRequest createMessageRequest, String participantId, final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dmConversationWithUserEventIdCreateValidateBeforeCall(createMessageRequest, participantId, _callback);
        Type localVarReturnType = new TypeToken<CreateDmEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdmConversationWithUserEventIdCreateRequest {
        private final String participantId;
        private CreateMessageRequest createMessageRequest;
        
        

        private APIdmConversationWithUserEventIdCreateRequest(String participantId) {
            this.participantId = participantId;
        }

        /**
         * Set createMessageRequest
         * @param createMessageRequest  (optional)
         * @return APIdmConversationWithUserEventIdCreateRequest
         */
        public APIdmConversationWithUserEventIdCreateRequest createMessageRequest(CreateMessageRequest createMessageRequest) {
            this.createMessageRequest = createMessageRequest;
            return this;
        }

        /**
         * Build call for dmConversationWithUserEventIdCreate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return dmConversationWithUserEventIdCreateCall(createMessageRequest, participantId, _callback);
        }

        /**
         * Execute dmConversationWithUserEventIdCreate request
         * @return CreateDmEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public CreateDmEventResponse execute() throws ApiException {
            
            ApiResponse<CreateDmEventResponse> localVarResp = dmConversationWithUserEventIdCreateWithHttpInfo(createMessageRequest, participantId);
            return localVarResp.getData();
        }
        /**
        * Calls the API using a retry mechanism to handle rate limits errors.
        *
        */
        public CreateDmEventResponse  execute(Integer retries) throws ApiException {
          CreateDmEventResponse localVarResp;
            try{
          localVarResp = execute();
          } catch (ApiException e) {
            if(handleRateLimit(e, retries)) {
              return execute(retries - 1);
            } else {
              throw e;
            }
          }
          return localVarResp;
        }
        /**
         * Execute dmConversationWithUserEventIdCreate request with HTTP info returned
         * @return ApiResponse&lt;CreateDmEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */

            public ApiResponse<CreateDmEventResponse> executeWithHttpInfo() throws ApiException {
              return dmConversationWithUserEventIdCreateWithHttpInfo(createMessageRequest, participantId);
            }
        /**
         * Execute dmConversationWithUserEventIdCreate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateDmEventResponse> _callback) throws ApiException {
            return dmConversationWithUserEventIdCreateAsync(createMessageRequest, participantId, _callback);
        }
    }

    /**
     * Send a new message to a user
     * Creates a new message for a DM Conversation with a participant user by ID
     * @param participantId The ID of the recipient user that will receive the DM. (required)
     * @return APIdmConversationWithUserEventIdCreateRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIdmConversationWithUserEventIdCreateRequest dmConversationWithUserEventIdCreate(String participantId) {
        return new APIdmConversationWithUserEventIdCreateRequest(participantId);
    }
    private okhttp3.Call getDmConversationsIdDmEventsCall(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/{id}/dm_events"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_types", eventTypes));
        }

        if (dmEventFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "dm_event.fields", dmEventFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, reduceAuthNames(localVarAuthNames), _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDmConversationsIdDmEventsValidateBeforeCall(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDmConversationsIdDmEvents(Async)");
        }
        

        okhttp3.Call localVarCall = getDmConversationsIdDmEventsCall(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        return localVarCall;

    }


    private ApiResponse<Get2DmConversationsIdDmEventsResponse> getDmConversationsIdDmEventsWithHttpInfo(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getDmConversationsIdDmEventsValidateBeforeCall(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, null);
        try {
            Type localVarReturnType = new TypeToken<Get2DmConversationsIdDmEventsResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<com.twitter.clientlib.model.ProblemOrError>(){}.getType()));
            throw e;
        }
    }

    private okhttp3.Call getDmConversationsIdDmEventsAsync(String id, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback<Get2DmConversationsIdDmEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDmConversationsIdDmEventsValidateBeforeCall(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2DmConversationsIdDmEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDmConversationsIdDmEventsRequest {
        private final String id;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> eventTypes;
        private Set<String> dmEventFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> userFields;
        private Set<String> tweetFields;
        private final Set<String> eventTypesAll = new HashSet<>(Arrays.asList("MessageCreate", "ParticipantsJoin", "ParticipantsLeave"));
        private final Set<String> dmEventFieldsAll = new HashSet<>(Arrays.asList("attachments", "created_at", "dm_conversation_id", "event_type", "id", "participant_ids", "referenced_tweets", "sender_id", "text"));
        private final Set<String> expansionsAll = new HashSet<>(Arrays.asList("attachments.media_keys", "participant_ids", "referenced_tweets.id", "sender_id"));
        private final Set<String> mediaFieldsAll = new HashSet<>(Arrays.asList("alt_text", "duration_ms", "height", "media_key", "non_public_metrics", "organic_metrics", "preview_image_url", "promoted_metrics", "public_metrics", "type", "url", "variants", "width"));
        private final Set<String> userFieldsAll = new HashSet<>(Arrays.asList("created_at", "description", "entities", "id", "location", "name", "pinned_tweet_id", "profile_image_url", "protected", "public_metrics", "url", "username", "verified", "withheld"));
        private final Set<String> tweetFieldsAll = new HashSet<>(Arrays.asList("attachments", "author_id", "context_annotations", "conversation_id", "created_at", "edit_controls", "edit_history_tweet_ids", "entities", "geo", "id", "in_reply_to_user_id", "lang", "non_public_metrics", "organic_metrics", "possibly_sensitive", "promoted_metrics", "public_metrics", "referenced_tweets", "reply_settings", "source", "text", "withheld"));
        
        private boolean isExclude = false;

        public APIgetDmConversationsIdDmEventsRequest excludeInputFields() {
          isExclude = true;
          return this;
        }

        private APIgetDmConversationsIdDmEventsRequest(String id) {
            this.id = id;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return APIgetDmConversationsIdDmEventsRequest
         */
        public APIgetDmConversationsIdDmEventsRequest maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }

        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return APIgetDmConversationsIdDmEventsRequest
         */
        public APIgetDmConversationsIdDmEventsRequest paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }

        /**
         * Set eventTypes
         * @param eventTypes The set of event_types to include in the results. (optional)
         * @return APIgetDmConversationsIdDmEventsRequest
         */
        public APIgetDmConversationsIdDmEventsRequest eventTypes(Set<String> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }

        /**
         * Set dmEventFields
         * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
         * @return APIgetDmConversationsIdDmEventsRequest
         */
        public APIgetDmConversationsIdDmEventsRequest dmEventFields(Set<String> dmEventFields) {
            this.dmEventFields = dmEventFields;
            return this;
        }

        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return APIgetDmConversationsIdDmEventsRequest
         */
        public APIgetDmConversationsIdDmEventsRequest expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }

        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return APIgetDmConversationsIdDmEventsRequest
         */
        public APIgetDmConversationsIdDmEventsRequest mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }

        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return APIgetDmConversationsIdDmEventsRequest
         */
        public APIgetDmConversationsIdDmEventsRequest userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }

        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return APIgetDmConversationsIdDmEventsRequest
         */
        public APIgetDmConversationsIdDmEventsRequest tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }

        /**
         * Build call for getDmConversationsIdDmEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDmConversationsIdDmEventsCall(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }

        /**
         * Execute getDmConversationsIdDmEvents request
         * @return Get2DmConversationsIdDmEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2DmConversationsIdDmEventsResponse execute() throws ApiException {
            eventTypes = getFields("eventTypes", isExclude, eventTypes, eventTypesAll);
            dmEventFields = getFields("dmEventFields", isExclude, dmEventFields, dmEventFieldsAll);
            expansions = getFields("expansions", isExclude, expansions, expansionsAll);
            mediaFields = getFields("mediaFields", isExclude, mediaFields, mediaFieldsAll);
            userFields = getFields("userFields", isExclude, userFields, userFieldsAll);
            tweetFields = getFields("tweetFields", isExclude, tweetFields, tweetFieldsAll);
            
            ApiResponse<Get2DmConversationsIdDmEventsResponse> localVarResp = getDmConversationsIdDmEventsWithHttpInfo(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            return localVarResp.getData();
        }
        /**
        * Calls the API using a retry mechanism to handle rate limits errors.
        *
        */
        public Get2DmConversationsIdDmEventsResponse  execute(Integer retries) throws ApiException {
          Get2DmConversationsIdDmEventsResponse localVarResp;
            try{
          localVarResp = execute();
          } catch (ApiException e) {
            if(handleRateLimit(e, retries)) {
              return execute(retries - 1);
            } else {
              throw e;
            }
          }
          return localVarResp;
        }
        /**
         * Execute getDmConversationsIdDmEvents request with HTTP info returned
         * @return ApiResponse&lt;Get2DmConversationsIdDmEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */

            public ApiResponse<Get2DmConversationsIdDmEventsResponse> executeWithHttpInfo() throws ApiException {
              return getDmConversationsIdDmEventsWithHttpInfo(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            }
        /**
         * Execute getDmConversationsIdDmEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2DmConversationsIdDmEventsResponse> _callback) throws ApiException {
            return getDmConversationsIdDmEventsAsync(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }
    }

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     * @param id The DM Conversation ID. (required)
     * @return APIgetDmConversationsIdDmEventsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDmConversationsIdDmEventsRequest getDmConversationsIdDmEvents(String id) {
        return new APIgetDmConversationsIdDmEventsRequest(id);
    }
    private okhttp3.Call getDmConversationsWithParticipantIdDmEventsCall(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/dm_conversations/with/{participant_id}/dm_events"
            .replaceAll("\\{" + "participant_id" + "\\}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_types", eventTypes));
        }

        if (dmEventFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "dm_event.fields", dmEventFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, reduceAuthNames(localVarAuthNames), _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDmConversationsWithParticipantIdDmEventsValidateBeforeCall(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getDmConversationsWithParticipantIdDmEvents(Async)");
        }
        

        okhttp3.Call localVarCall = getDmConversationsWithParticipantIdDmEventsCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        return localVarCall;

    }


    private ApiResponse<Get2DmConversationsWithParticipantIdDmEventsResponse> getDmConversationsWithParticipantIdDmEventsWithHttpInfo(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getDmConversationsWithParticipantIdDmEventsValidateBeforeCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, null);
        try {
            Type localVarReturnType = new TypeToken<Get2DmConversationsWithParticipantIdDmEventsResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<com.twitter.clientlib.model.ProblemOrError>(){}.getType()));
            throw e;
        }
    }

    private okhttp3.Call getDmConversationsWithParticipantIdDmEventsAsync(String participantId, Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback<Get2DmConversationsWithParticipantIdDmEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDmConversationsWithParticipantIdDmEventsValidateBeforeCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2DmConversationsWithParticipantIdDmEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDmConversationsWithParticipantIdDmEventsRequest {
        private final String participantId;
        private Integer maxResults;
        private String paginationToken;
        private Set<String> eventTypes;
        private Set<String> dmEventFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> userFields;
        private Set<String> tweetFields;
        private final Set<String> eventTypesAll = new HashSet<>(Arrays.asList("MessageCreate", "ParticipantsJoin", "ParticipantsLeave"));
        private final Set<String> dmEventFieldsAll = new HashSet<>(Arrays.asList("attachments", "created_at", "dm_conversation_id", "event_type", "id", "participant_ids", "referenced_tweets", "sender_id", "text"));
        private final Set<String> expansionsAll = new HashSet<>(Arrays.asList("attachments.media_keys", "participant_ids", "referenced_tweets.id", "sender_id"));
        private final Set<String> mediaFieldsAll = new HashSet<>(Arrays.asList("alt_text", "duration_ms", "height", "media_key", "non_public_metrics", "organic_metrics", "preview_image_url", "promoted_metrics", "public_metrics", "type", "url", "variants", "width"));
        private final Set<String> userFieldsAll = new HashSet<>(Arrays.asList("created_at", "description", "entities", "id", "location", "name", "pinned_tweet_id", "profile_image_url", "protected", "public_metrics", "url", "username", "verified", "withheld"));
        private final Set<String> tweetFieldsAll = new HashSet<>(Arrays.asList("attachments", "author_id", "context_annotations", "conversation_id", "created_at", "edit_controls", "edit_history_tweet_ids", "entities", "geo", "id", "in_reply_to_user_id", "lang", "non_public_metrics", "organic_metrics", "possibly_sensitive", "promoted_metrics", "public_metrics", "referenced_tweets", "reply_settings", "source", "text", "withheld"));
        
        private boolean isExclude = false;

        public APIgetDmConversationsWithParticipantIdDmEventsRequest excludeInputFields() {
          isExclude = true;
          return this;
        }

        private APIgetDmConversationsWithParticipantIdDmEventsRequest(String participantId) {
            this.participantId = participantId;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return APIgetDmConversationsWithParticipantIdDmEventsRequest
         */
        public APIgetDmConversationsWithParticipantIdDmEventsRequest maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }

        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return APIgetDmConversationsWithParticipantIdDmEventsRequest
         */
        public APIgetDmConversationsWithParticipantIdDmEventsRequest paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }

        /**
         * Set eventTypes
         * @param eventTypes The set of event_types to include in the results. (optional)
         * @return APIgetDmConversationsWithParticipantIdDmEventsRequest
         */
        public APIgetDmConversationsWithParticipantIdDmEventsRequest eventTypes(Set<String> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }

        /**
         * Set dmEventFields
         * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
         * @return APIgetDmConversationsWithParticipantIdDmEventsRequest
         */
        public APIgetDmConversationsWithParticipantIdDmEventsRequest dmEventFields(Set<String> dmEventFields) {
            this.dmEventFields = dmEventFields;
            return this;
        }

        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return APIgetDmConversationsWithParticipantIdDmEventsRequest
         */
        public APIgetDmConversationsWithParticipantIdDmEventsRequest expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }

        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return APIgetDmConversationsWithParticipantIdDmEventsRequest
         */
        public APIgetDmConversationsWithParticipantIdDmEventsRequest mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }

        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return APIgetDmConversationsWithParticipantIdDmEventsRequest
         */
        public APIgetDmConversationsWithParticipantIdDmEventsRequest userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }

        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return APIgetDmConversationsWithParticipantIdDmEventsRequest
         */
        public APIgetDmConversationsWithParticipantIdDmEventsRequest tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }

        /**
         * Build call for getDmConversationsWithParticipantIdDmEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDmConversationsWithParticipantIdDmEventsCall(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }

        /**
         * Execute getDmConversationsWithParticipantIdDmEvents request
         * @return Get2DmConversationsWithParticipantIdDmEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2DmConversationsWithParticipantIdDmEventsResponse execute() throws ApiException {
            eventTypes = getFields("eventTypes", isExclude, eventTypes, eventTypesAll);
            dmEventFields = getFields("dmEventFields", isExclude, dmEventFields, dmEventFieldsAll);
            expansions = getFields("expansions", isExclude, expansions, expansionsAll);
            mediaFields = getFields("mediaFields", isExclude, mediaFields, mediaFieldsAll);
            userFields = getFields("userFields", isExclude, userFields, userFieldsAll);
            tweetFields = getFields("tweetFields", isExclude, tweetFields, tweetFieldsAll);
            
            ApiResponse<Get2DmConversationsWithParticipantIdDmEventsResponse> localVarResp = getDmConversationsWithParticipantIdDmEventsWithHttpInfo(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            return localVarResp.getData();
        }
        /**
        * Calls the API using a retry mechanism to handle rate limits errors.
        *
        */
        public Get2DmConversationsWithParticipantIdDmEventsResponse  execute(Integer retries) throws ApiException {
          Get2DmConversationsWithParticipantIdDmEventsResponse localVarResp;
            try{
          localVarResp = execute();
          } catch (ApiException e) {
            if(handleRateLimit(e, retries)) {
              return execute(retries - 1);
            } else {
              throw e;
            }
          }
          return localVarResp;
        }
        /**
         * Execute getDmConversationsWithParticipantIdDmEvents request with HTTP info returned
         * @return ApiResponse&lt;Get2DmConversationsWithParticipantIdDmEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */

            public ApiResponse<Get2DmConversationsWithParticipantIdDmEventsResponse> executeWithHttpInfo() throws ApiException {
              return getDmConversationsWithParticipantIdDmEventsWithHttpInfo(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            }
        /**
         * Execute getDmConversationsWithParticipantIdDmEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2DmConversationsWithParticipantIdDmEventsResponse> _callback) throws ApiException {
            return getDmConversationsWithParticipantIdDmEventsAsync(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }
    }

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     * @param participantId The ID of the participant user for the One to One DM conversation. (required)
     * @return APIgetDmConversationsWithParticipantIdDmEventsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDmConversationsWithParticipantIdDmEventsRequest getDmConversationsWithParticipantIdDmEvents(String participantId) {
        return new APIgetDmConversationsWithParticipantIdDmEventsRequest(participantId);
    }
    private okhttp3.Call getDmEventsCall(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/dm_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_types", eventTypes));
        }

        if (dmEventFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "dm_event.fields", dmEventFields));
        }

        if (expansions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expansions", expansions));
        }

        if (mediaFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media.fields", mediaFields));
        }

        if (userFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user.fields", userFields));
        }

        if (tweetFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tweet.fields", tweetFields));
        }

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2UserToken", "UserToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, reduceAuthNames(localVarAuthNames), _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDmEventsValidateBeforeCall(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDmEventsCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        return localVarCall;

    }


    private ApiResponse<Get2DmEventsResponse> getDmEventsWithHttpInfo(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields) throws ApiException {
        okhttp3.Call localVarCall = getDmEventsValidateBeforeCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, null);
        try {
            Type localVarReturnType = new TypeToken<Get2DmEventsResponse>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<com.twitter.clientlib.model.ProblemOrError>(){}.getType()));
            throw e;
        }
    }

    private okhttp3.Call getDmEventsAsync(Integer maxResults, String paginationToken, Set<String> eventTypes, Set<String> dmEventFields, Set<String> expansions, Set<String> mediaFields, Set<String> userFields, Set<String> tweetFields, final ApiCallback<Get2DmEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDmEventsValidateBeforeCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        Type localVarReturnType = new TypeToken<Get2DmEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDmEventsRequest {
        private Integer maxResults;
        private String paginationToken;
        private Set<String> eventTypes;
        private Set<String> dmEventFields;
        private Set<String> expansions;
        private Set<String> mediaFields;
        private Set<String> userFields;
        private Set<String> tweetFields;
        private final Set<String> eventTypesAll = new HashSet<>(Arrays.asList("MessageCreate", "ParticipantsJoin", "ParticipantsLeave"));
        private final Set<String> dmEventFieldsAll = new HashSet<>(Arrays.asList("attachments", "created_at", "dm_conversation_id", "event_type", "id", "participant_ids", "referenced_tweets", "sender_id", "text"));
        private final Set<String> expansionsAll = new HashSet<>(Arrays.asList("attachments.media_keys", "participant_ids", "referenced_tweets.id", "sender_id"));
        private final Set<String> mediaFieldsAll = new HashSet<>(Arrays.asList("alt_text", "duration_ms", "height", "media_key", "non_public_metrics", "organic_metrics", "preview_image_url", "promoted_metrics", "public_metrics", "type", "url", "variants", "width"));
        private final Set<String> userFieldsAll = new HashSet<>(Arrays.asList("created_at", "description", "entities", "id", "location", "name", "pinned_tweet_id", "profile_image_url", "protected", "public_metrics", "url", "username", "verified", "withheld"));
        private final Set<String> tweetFieldsAll = new HashSet<>(Arrays.asList("attachments", "author_id", "context_annotations", "conversation_id", "created_at", "edit_controls", "edit_history_tweet_ids", "entities", "geo", "id", "in_reply_to_user_id", "lang", "non_public_metrics", "organic_metrics", "possibly_sensitive", "promoted_metrics", "public_metrics", "referenced_tweets", "reply_settings", "source", "text", "withheld"));
        
        private boolean isExclude = false;

        public APIgetDmEventsRequest excludeInputFields() {
          isExclude = true;
          return this;
        }

        private APIgetDmEventsRequest() {
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of results. (optional, default to 100)
         * @return APIgetDmEventsRequest
         */
        public APIgetDmEventsRequest maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }

        /**
         * Set paginationToken
         * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
         * @return APIgetDmEventsRequest
         */
        public APIgetDmEventsRequest paginationToken(String paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }

        /**
         * Set eventTypes
         * @param eventTypes The set of event_types to include in the results. (optional)
         * @return APIgetDmEventsRequest
         */
        public APIgetDmEventsRequest eventTypes(Set<String> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }

        /**
         * Set dmEventFields
         * @param dmEventFields A comma separated list of DmEvent fields to display. (optional)
         * @return APIgetDmEventsRequest
         */
        public APIgetDmEventsRequest dmEventFields(Set<String> dmEventFields) {
            this.dmEventFields = dmEventFields;
            return this;
        }

        /**
         * Set expansions
         * @param expansions A comma separated list of fields to expand. (optional)
         * @return APIgetDmEventsRequest
         */
        public APIgetDmEventsRequest expansions(Set<String> expansions) {
            this.expansions = expansions;
            return this;
        }

        /**
         * Set mediaFields
         * @param mediaFields A comma separated list of Media fields to display. (optional)
         * @return APIgetDmEventsRequest
         */
        public APIgetDmEventsRequest mediaFields(Set<String> mediaFields) {
            this.mediaFields = mediaFields;
            return this;
        }

        /**
         * Set userFields
         * @param userFields A comma separated list of User fields to display. (optional)
         * @return APIgetDmEventsRequest
         */
        public APIgetDmEventsRequest userFields(Set<String> userFields) {
            this.userFields = userFields;
            return this;
        }

        /**
         * Set tweetFields
         * @param tweetFields A comma separated list of Tweet fields to display. (optional)
         * @return APIgetDmEventsRequest
         */
        public APIgetDmEventsRequest tweetFields(Set<String> tweetFields) {
            this.tweetFields = tweetFields;
            return this;
        }

        /**
         * Build call for getDmEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDmEventsCall(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }

        /**
         * Execute getDmEvents request
         * @return Get2DmEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public Get2DmEventsResponse execute() throws ApiException {
            eventTypes = getFields("eventTypes", isExclude, eventTypes, eventTypesAll);
            dmEventFields = getFields("dmEventFields", isExclude, dmEventFields, dmEventFieldsAll);
            expansions = getFields("expansions", isExclude, expansions, expansionsAll);
            mediaFields = getFields("mediaFields", isExclude, mediaFields, mediaFieldsAll);
            userFields = getFields("userFields", isExclude, userFields, userFieldsAll);
            tweetFields = getFields("tweetFields", isExclude, tweetFields, tweetFieldsAll);
            
            ApiResponse<Get2DmEventsResponse> localVarResp = getDmEventsWithHttpInfo(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            return localVarResp.getData();
        }
        /**
        * Calls the API using a retry mechanism to handle rate limits errors.
        *
        */
        public Get2DmEventsResponse  execute(Integer retries) throws ApiException {
          Get2DmEventsResponse localVarResp;
            try{
          localVarResp = execute();
          } catch (ApiException e) {
            if(handleRateLimit(e, retries)) {
              return execute(retries - 1);
            } else {
              throw e;
            }
          }
          return localVarResp;
        }
        /**
         * Execute getDmEvents request with HTTP info returned
         * @return ApiResponse&lt;Get2DmEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */

            public ApiResponse<Get2DmEventsResponse> executeWithHttpInfo() throws ApiException {
              return getDmEventsWithHttpInfo(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            }
        /**
         * Execute getDmEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Get2DmEventsResponse> _callback) throws ApiException {
            return getDmEventsAsync(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, _callback);
        }
    }

    /**
     * Get recent DM Events
     * Returns recent DM Events across DM conversations
     * @return APIgetDmEventsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The request has failed. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDmEventsRequest getDmEvents() {
        return new APIgetDmEventsRequest();
    }
}
