/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.api;

import com.twitter.clientlib.TwitterCredentialsBearer;
import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.CreateComplianceJobRequest;
import com.twitter.clientlib.model.CreateComplianceJobResponse;
import com.twitter.clientlib.model.Error;
import com.twitter.clientlib.model.Get2ComplianceJobsIdResponse;
import com.twitter.clientlib.model.Get2ComplianceJobsResponse;
import java.time.OffsetDateTime;
import com.twitter.clientlib.model.Problem;
import java.util.Set;
import com.twitter.clientlib.model.TweetComplianceStreamResponse;
import com.twitter.clientlib.model.TweetLabelStreamResponse;
import com.twitter.clientlib.model.UserComplianceStreamResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.InputStream;

/**
 * API tests for ComplianceApi
 */
@Disabled
public class ComplianceApiTest {

    private final TwitterApi apiInstance = new TwitterApi(new TwitterCredentialsBearer(System.getenv("TWITTER_BEARER_TOKEN")));
    // TODO set credentials
    
    /**
     * Create compliance job
     *
     * Creates a compliance for the given job type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBatchComplianceJobTest() throws ApiException {
        CreateComplianceJobRequest createComplianceJobRequest = null;
                CreateComplianceJobResponse response = apiInstance.compliance().createBatchComplianceJob(createComplianceJobRequest)
                .execute();
        // TODO: test validations
    }


    /**
     * Get Compliance Job
     *
     * Returns a single Compliance Job by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchComplianceJobTest() throws ApiException {
        String id = null;
        Set<String> complianceJobFields = null;
                Get2ComplianceJobsIdResponse response = apiInstance.compliance().getBatchComplianceJob(id)
                .complianceJobFields(complianceJobFields)
                .execute();
        // TODO: test validations
    }


    /**
     * Tweets Compliance stream
     *
     * Streams 100% of compliance data for Tweets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTweetsComplianceStreamTest() throws ApiException {
        Integer backfillMinutes = null;
        Integer partition = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
                InputStream response = apiInstance.compliance().getTweetsComplianceStream(partition)
                .backfillMinutes(backfillMinutes)
                .startTime(startTime)
                .endTime(endTime)
                .execute();
        // TODO: test validations
    }


    /**
     * Tweets Label stream
     *
     * Streams 100% of labeling events applied to Tweets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTweetsLabelStreamTest() throws ApiException {
        Integer backfillMinutes = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
                InputStream response = apiInstance.compliance().getTweetsLabelStream()
                .backfillMinutes(backfillMinutes)
                .startTime(startTime)
                .endTime(endTime)
                .execute();
        // TODO: test validations
    }


    /**
     * Users Compliance stream
     *
     * Streams 100% of compliance data for Users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersComplianceStreamTest() throws ApiException {
        Integer backfillMinutes = null;
        Integer partition = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
                InputStream response = apiInstance.compliance().getUsersComplianceStream(partition)
                .backfillMinutes(backfillMinutes)
                .startTime(startTime)
                .endTime(endTime)
                .execute();
        // TODO: test validations
    }


    /**
     * List Compliance Jobs
     *
     * Returns recent Compliance Jobs for a given job type and optional job status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBatchComplianceJobsTest() throws ApiException {
        String type = null;
        String status = null;
        Set<String> complianceJobFields = null;
                Get2ComplianceJobsResponse response = apiInstance.compliance().listBatchComplianceJobs(type)
                .status(status)
                .complianceJobFields(complianceJobFields)
                .execute();
        // TODO: test validations
    }

}
