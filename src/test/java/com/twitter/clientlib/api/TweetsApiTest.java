/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.api;

import com.twitter.clientlib.TwitterCredentialsBearer;
import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.AddOrDeleteRulesRequest;
import com.twitter.clientlib.model.AddOrDeleteRulesResponse;
import com.twitter.clientlib.model.Error;
import com.twitter.clientlib.model.FilteredStreamingTweetResponse;
import com.twitter.clientlib.model.Get2ListsIdTweetsResponse;
import com.twitter.clientlib.model.Get2SpacesIdBuyersResponse;
import com.twitter.clientlib.model.Get2SpacesIdTweetsResponse;
import com.twitter.clientlib.model.Get2TweetsCountsAllResponse;
import com.twitter.clientlib.model.Get2TweetsCountsRecentResponse;
import com.twitter.clientlib.model.Get2TweetsIdQuoteTweetsResponse;
import com.twitter.clientlib.model.Get2TweetsIdResponse;
import com.twitter.clientlib.model.Get2TweetsResponse;
import com.twitter.clientlib.model.Get2TweetsSearchAllResponse;
import com.twitter.clientlib.model.Get2TweetsSearchRecentResponse;
import com.twitter.clientlib.model.Get2UsersIdLikedTweetsResponse;
import com.twitter.clientlib.model.Get2UsersIdMentionsResponse;
import com.twitter.clientlib.model.Get2UsersIdTimelinesReverseChronologicalResponse;
import com.twitter.clientlib.model.Get2UsersIdTweetsResponse;
import java.time.OffsetDateTime;
import com.twitter.clientlib.model.Problem;
import com.twitter.clientlib.model.RulesLookupResponse;
import java.util.Set;
import com.twitter.clientlib.model.StreamingTweetResponse;
import com.twitter.clientlib.model.TweetCreateRequest;
import com.twitter.clientlib.model.TweetCreateResponse;
import com.twitter.clientlib.model.TweetDeleteResponse;
import com.twitter.clientlib.model.TweetHideRequest;
import com.twitter.clientlib.model.TweetHideResponse;
import com.twitter.clientlib.model.UsersLikesCreateRequest;
import com.twitter.clientlib.model.UsersLikesCreateResponse;
import com.twitter.clientlib.model.UsersLikesDeleteResponse;
import com.twitter.clientlib.model.UsersRetweetsCreateRequest;
import com.twitter.clientlib.model.UsersRetweetsCreateResponse;
import com.twitter.clientlib.model.UsersRetweetsDeleteResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.InputStream;

/**
 * API tests for TweetsApi
 */
@Disabled
public class TweetsApiTest {

    private final TwitterApi apiInstance = new TwitterApi(new TwitterCredentialsBearer(System.getenv("TWITTER_BEARER_TOKEN")));
    // TODO set credentials
    
    /**
     * Add/Delete rules
     *
     * Add or delete rules from a User&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOrDeleteRulesTest() throws ApiException {
        AddOrDeleteRulesRequest addOrDeleteRulesRequest = null;
        Boolean dryRun = null;
                AddOrDeleteRulesResponse response = apiInstance.tweets().addOrDeleteRules(addOrDeleteRulesRequest, dryRun);
        // TODO: test validations
    }


    /**
     * Creation of a Tweet
     *
     * Causes the User to create a Tweet under the authorized account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTweetTest() throws ApiException {
        TweetCreateRequest tweetCreateRequest = null;
                TweetCreateResponse response = apiInstance.tweets().createTweet(tweetCreateRequest);
        // TODO: test validations
    }


    /**
     * Tweet delete by Tweet ID
     *
     * Delete specified Tweet (in the path) by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTweetByIdTest() throws ApiException {
        String id = null;
                TweetDeleteResponse response = apiInstance.tweets().deleteTweetById(id);
        // TODO: test validations
    }


    /**
     * Tweet lookup by Tweet ID
     *
     * Returns a variety of information about the Tweet specified by the requested ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTweetByIdTest() throws ApiException {
        String id = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2TweetsIdResponse response = apiInstance.tweets().findTweetById(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Tweet lookup by Tweet IDs
     *
     * Returns a variety of information about the Tweet specified by the requested ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTweetsByIdTest() throws ApiException {
        List<String> ids = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2TweetsResponse response = apiInstance.tweets().findTweetsById(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Retrieve Tweets that quote a Tweet.
     *
     * Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTweetsThatQuoteATweetTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> exclude = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2TweetsIdQuoteTweetsResponse response = apiInstance.tweets().findTweetsThatQuoteATweet(id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Rules lookup
     *
     * Returns rules from a User&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRulesTest() throws ApiException {
        List<String> ids = null;
        Integer maxResults = null;
        String paginationToken = null;
                RulesLookupResponse response = apiInstance.tweets().getRules(ids, maxResults, paginationToken);
        // TODO: test validations
    }


    /**
     * Hide replies
     *
     * Hides or unhides a reply to an owned conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hideReplyByIdTest() throws ApiException {
        TweetHideRequest tweetHideRequest = null;
        String tweetId = null;
                TweetHideResponse response = apiInstance.tweets().hideReplyById(tweetHideRequest, tweetId);
        // TODO: test validations
    }


    /**
     * List Tweets timeline by List ID.
     *
     * Returns a list of Tweets associated with the provided List ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listsIdTweetsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2ListsIdTweetsResponse response = apiInstance.tweets().listsIdTweets(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Sample stream
     *
     * Streams a deterministic 1% of public Tweets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sampleStreamTest() throws ApiException {
        Integer backfillMinutes = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                InputStream response = apiInstance.tweets().sampleStream(backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Filtered stream
     *
     * Streams Tweets matching the stream&#39;s active rule set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchStreamTest() throws ApiException {
        Integer backfillMinutes = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                InputStream response = apiInstance.tweets().searchStream(backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Retrieve the list of Users who purchased a ticket to the given space
     *
     * Retrieves the list of Users who purchased a ticket to the given space
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spaceBuyersTest() throws ApiException {
        String id = null;
        String paginationToken = null;
        Integer maxResults = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
                Get2SpacesIdBuyersResponse response = apiInstance.spaces().spaceBuyers(id, paginationToken, maxResults, userFields, expansions, tweetFields);
        // TODO: test validations
    }


    /**
     * Retrieve Tweets from a Space.
     *
     * Retrieves Tweets shared in the specified Space.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spaceTweetsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2SpacesIdTweetsResponse response = apiInstance.spaces().spaceTweets(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Full archive search counts
     *
     * Returns Tweet Counts that match a search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tweetCountsFullArchiveSearchTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        String nextToken = null;
        String paginationToken = null;
        String granularity = null;
        Set<String> searchCountFields = null;
                Get2TweetsCountsAllResponse response = apiInstance.tweets().tweetCountsFullArchiveSearch(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
        // TODO: test validations
    }


    /**
     * Recent search counts
     *
     * Returns Tweet Counts from the last 7 days that match a search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tweetCountsRecentSearchTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        String nextToken = null;
        String paginationToken = null;
        String granularity = null;
        Set<String> searchCountFields = null;
                Get2TweetsCountsRecentResponse response = apiInstance.tweets().tweetCountsRecentSearch(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
        // TODO: test validations
    }


    /**
     * Full-archive search
     *
     * Returns Tweets that match a search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tweetsFullarchiveSearchTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String nextToken = null;
        String paginationToken = null;
        String sortOrder = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2TweetsSearchAllResponse response = apiInstance.tweets().tweetsFullarchiveSearch(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Recent search
     *
     * Returns Tweets from the last 7 days that match a search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tweetsRecentSearchTest() throws ApiException {
        String query = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String nextToken = null;
        String paginationToken = null;
        String sortOrder = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2TweetsSearchRecentResponse response = apiInstance.tweets().tweetsRecentSearch(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Causes the User (in the path) to like the specified Tweet
     *
     * Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdLikeTest() throws ApiException {
        UsersLikesCreateRequest usersLikesCreateRequest = null;
        String id = null;
                UsersLikesCreateResponse response = apiInstance.tweets().usersIdLike(usersLikesCreateRequest, id);
        // TODO: test validations
    }


    /**
     * Returns Tweet objects liked by the provided User ID
     *
     * Returns a list of Tweets liked by the provided User ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdLikedTweetsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2UsersIdLikedTweetsResponse response = apiInstance.tweets().usersIdLikedTweets(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * User mention timeline by User ID
     *
     * Returns Tweet objects that mention username associated to the provided User ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdMentionsTest() throws ApiException {
        String id = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String paginationToken = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2UsersIdMentionsResponse response = apiInstance.tweets().usersIdMentions(id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Causes the User (in the path) to retweet the specified Tweet.
     *
     * Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdRetweetsTest() throws ApiException {
        UsersRetweetsCreateRequest usersRetweetsCreateRequest = null;
        String id = null;
                UsersRetweetsCreateResponse response = apiInstance.tweets().usersIdRetweets(usersRetweetsCreateRequest, id);
        // TODO: test validations
    }


    /**
     * User home timeline by User ID
     *
     * Returns Tweet objects that appears in the provided User ID&#39;s home timeline
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdTimelineTest() throws ApiException {
        String id = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> exclude = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2UsersIdTimelinesReverseChronologicalResponse response = apiInstance.tweets().usersIdTimeline(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * User Tweets timeline by User ID
     *
     * Returns a list of Tweets authored by the provided User ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdTweetsTest() throws ApiException {
        String id = null;
        String sinceId = null;
        String untilId = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> exclude = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2UsersIdTweetsResponse response = apiInstance.tweets().usersIdTweets(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Causes the User (in the path) to unlike the specified Tweet
     *
     * Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdUnlikeTest() throws ApiException {
        String id = null;
        String tweetId = null;
                UsersLikesDeleteResponse response = apiInstance.tweets().usersIdUnlike(id, tweetId);
        // TODO: test validations
    }


    /**
     * Causes the User (in the path) to unretweet the specified Tweet
     *
     * Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdUnretweetsTest() throws ApiException {
        String id = null;
        String sourceTweetId = null;
                UsersRetweetsDeleteResponse response = apiInstance.tweets().usersIdUnretweets(id, sourceTweetId);
        // TODO: test validations
    }

}
