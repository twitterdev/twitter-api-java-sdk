/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.api;

import com.twitter.clientlib.TwitterCredentialsBearer;
import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.BookmarkAddRequest;
import com.twitter.clientlib.model.BookmarkMutationResponse;
import com.twitter.clientlib.model.Error;
import com.twitter.clientlib.model.Get2UsersIdBookmarksResponse;
import com.twitter.clientlib.model.Problem;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.InputStream;

/**
 * API tests for BookmarksApi
 */
@Disabled
public class BookmarksApiTest {

    private final TwitterApi apiInstance = new TwitterApi(new TwitterCredentialsBearer(System.getenv("TWITTER_BEARER_TOKEN")));
    // TODO set credentials
    
    /**
     * Bookmarks by User
     *
     * Returns Tweet objects that have been bookmarked by the requesting User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersIdBookmarksTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> tweetFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> pollFields = null;
        Set<String> userFields = null;
        Set<String> placeFields = null;
                Get2UsersIdBookmarksResponse response = apiInstance.bookmarks().getUsersIdBookmarks(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
        // TODO: test validations
    }


    /**
     * Add Tweet to Bookmarks
     *
     * Adds a Tweet (ID in the body) to the requesting User&#39;s (in the path) bookmarks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUsersIdBookmarksTest() throws ApiException {
        BookmarkAddRequest bookmarkAddRequest = null;
        String id = null;
                BookmarkMutationResponse response = apiInstance.bookmarks().postUsersIdBookmarks(bookmarkAddRequest, id);
        // TODO: test validations
    }


    /**
     * Remove a bookmarked Tweet
     *
     * Removes a Tweet from the requesting User&#39;s bookmarked Tweets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdBookmarksDeleteTest() throws ApiException {
        String id = null;
        String tweetId = null;
                BookmarkMutationResponse response = apiInstance.bookmarks().usersIdBookmarksDelete(id, tweetId);
        // TODO: test validations
    }

}
