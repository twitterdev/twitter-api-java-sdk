/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.api;

import com.twitter.clientlib.TwitterCredentialsBearer;
import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.CreateDmConversationRequest;
import com.twitter.clientlib.model.CreateDmEventResponse;
import com.twitter.clientlib.model.CreateMessageRequest;
import com.twitter.clientlib.model.Error;
import com.twitter.clientlib.model.Get2DmConversationsIdDmEventsResponse;
import com.twitter.clientlib.model.Get2DmConversationsWithParticipantIdDmEventsResponse;
import com.twitter.clientlib.model.Get2DmEventsResponse;
import com.twitter.clientlib.model.Problem;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.InputStream;

/**
 * API tests for DirectMessagesApi
 */
@Disabled
public class DirectMessagesApiTest {

    private final TwitterApi apiInstance = new TwitterApi(new TwitterCredentialsBearer(System.getenv("TWITTER_BEARER_TOKEN")));
    // TODO set credentials
    
    /**
     * Send a new message to a DM Conversation
     *
     * Creates a new message for a DM Conversation specified by DM Conversation ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dmConversationByIdEventIdCreateTest() throws ApiException {
        CreateMessageRequest createMessageRequest = null;
        String dmConversationId = null;
                CreateDmEventResponse response = apiInstance.directMessages().dmConversationByIdEventIdCreate(dmConversationId)
                .createMessageRequest(createMessageRequest)
                .execute();
        // TODO: test validations
    }


    /**
     * Create a new DM Conversation
     *
     * Creates a new DM Conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dmConversationIdCreateTest() throws ApiException {
        CreateDmConversationRequest createDmConversationRequest = null;
                CreateDmEventResponse response = apiInstance.directMessages().dmConversationIdCreate()
                .createDmConversationRequest(createDmConversationRequest)
                .execute();
        // TODO: test validations
    }


    /**
     * Send a new message to a user
     *
     * Creates a new message for a DM Conversation with a participant user by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dmConversationWithUserEventIdCreateTest() throws ApiException {
        CreateMessageRequest createMessageRequest = null;
        String participantId = null;
                CreateDmEventResponse response = apiInstance.directMessages().dmConversationWithUserEventIdCreate(participantId)
                .createMessageRequest(createMessageRequest)
                .execute();
        // TODO: test validations
    }


    /**
     * Get DM Events for a DM Conversation
     *
     * Returns DM Events for a DM Conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDmConversationsIdDmEventsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> eventTypes = null;
        Set<String> dmEventFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> userFields = null;
        Set<String> tweetFields = null;
                Get2DmConversationsIdDmEventsResponse response = apiInstance.directMessages().getDmConversationsIdDmEvents(id)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .eventTypes(eventTypes)
                .dmEventFields(dmEventFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .userFields(userFields)
                .tweetFields(tweetFields)
                .execute();
        // TODO: test validations
    }


    /**
     * Get DM Events for a DM Conversation
     *
     * Returns DM Events for a DM Conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDmConversationsWithParticipantIdDmEventsTest() throws ApiException {
        String participantId = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> eventTypes = null;
        Set<String> dmEventFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> userFields = null;
        Set<String> tweetFields = null;
                Get2DmConversationsWithParticipantIdDmEventsResponse response = apiInstance.directMessages().getDmConversationsWithParticipantIdDmEvents(participantId)
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .eventTypes(eventTypes)
                .dmEventFields(dmEventFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .userFields(userFields)
                .tweetFields(tweetFields)
                .execute();
        // TODO: test validations
    }


    /**
     * Get recent DM Events
     *
     * Returns recent DM Events across DM conversations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDmEventsTest() throws ApiException {
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> eventTypes = null;
        Set<String> dmEventFields = null;
        Set<String> expansions = null;
        Set<String> mediaFields = null;
        Set<String> userFields = null;
        Set<String> tweetFields = null;
                Get2DmEventsResponse response = apiInstance.directMessages().getDmEvents()
                .maxResults(maxResults)
                .paginationToken(paginationToken)
                .eventTypes(eventTypes)
                .dmEventFields(dmEventFields)
                .expansions(expansions)
                .mediaFields(mediaFields)
                .userFields(userFields)
                .tweetFields(tweetFields)
                .execute();
        // TODO: test validations
    }

}
