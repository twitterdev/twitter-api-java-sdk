/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.auth;

import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

import com.github.scribejava.core.model.OAuth2AccessToken;
import com.github.scribejava.core.pkce.PKCE;
import com.github.scribejava.core.pkce.PKCECodeChallengeMethod;

import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.TwitterCredentialsOAuth2;
import com.twitter.clientlib.api.TwitterApi;
import com.twitter.clientlib.auth.TwitterOAuth20Service;
import com.twitter.clientlib.model.ResourceUnauthorizedProblem;
import com.twitter.clientlib.model.Get2TweetsIdResponse;

/**
* This is an example of getting an OAuth2 access token and using it to call an API.
* It's expected to set TWITTER_OAUTH2_CLIENT_ID & TWITTER_OAUTH2_CLIENT_SECRET in TwitterCredentialsOAuth2
*
* Example steps:
* 1. Getting the App Authorization URL.
* 2. User should click the URL and authorize it.
* 3. After receiving the access token, setting the values into TwitterCredentialsOAuth2.
* 4. Call the API.
*/

public class OAuth20GetAccessToken {

  public static void main(String[] args) {
    OAuth20GetAccessToken example = new OAuth20GetAccessToken();
    TwitterCredentialsOAuth2 credentials = new TwitterCredentialsOAuth2(System.getenv("TWITTER_OAUTH2_CLIENT_ID"),
        System.getenv("TWITTER_OAUTH2_CLIENT_SECRET"),
        System.getenv("TWITTER_OAUTH2_ACCESS_TOKEN"),
        System.getenv("TWITTER_OAUTH2_REFRESH_TOKEN"));

    OAuth2AccessToken accessToken = example.getAccessToken(credentials);
    if (accessToken == null) {
      return;
    }

    // Setting the access & refresh tokens into TwitterCredentialsOAuth2
    credentials.setTwitterOauth2AccessToken(accessToken.getAccessToken());
    credentials.setTwitterOauth2RefreshToken(accessToken.getRefreshToken());
    example.callApi(credentials);
  }

  public OAuth2AccessToken getAccessToken(TwitterCredentialsOAuth2 credentials) {
    TwitterOAuth20Service service = new TwitterOAuth20Service(
        credentials.getTwitterOauth2ClientId(),
        credentials.getTwitterOAuth2ClientSecret(),
        "http://twitter.com",
        "offline.access tweet.read users.read");

    OAuth2AccessToken accessToken = null;
    try {
      final Scanner in = new Scanner(System.in, "UTF-8");
      System.out.println("Fetching the Authorization URL...");

      final String secretState = "state";
      PKCE pkce = new PKCE();
      pkce.setCodeChallenge("challenge");
      pkce.setCodeChallengeMethod(PKCECodeChallengeMethod.PLAIN);
      pkce.setCodeVerifier("challenge");
      String authorizationUrl = service.getAuthorizationUrl(pkce, secretState);

      System.out.println("Go to the Authorization URL and authorize your App:\n" +
          authorizationUrl + "\nAfter that paste the authorization code here\n>>");
      final String code = in.nextLine();
      System.out.println("\nTrading the Authorization Code for an Access Token...");
      accessToken = service.getAccessToken(pkce, code);

      System.out.println("Access token: " + accessToken.getAccessToken());
      System.out.println("Refresh token: " + accessToken.getRefreshToken());
    } catch (Exception e) {
      System.err.println("Error while getting the access token:\n " + e);
      e.printStackTrace();
    }
    return accessToken;
  }

  public void callApi(TwitterCredentialsOAuth2 credentials) {
    TwitterApi apiInstance = new TwitterApi(credentials);

    Set<String> tweetFields = new HashSet<>();
    tweetFields.add("author_id");
    tweetFields.add("id");
    tweetFields.add("created_at");

    try {
      // findTweetById
      Get2TweetsIdResponse result = apiInstance.tweets().findTweetById("20", tweetFields, null, null,
          null, null, null);
      if (result.getErrors() != null && result.getErrors().size() > 0) {
        System.out.println("Error:");
        result.getErrors().forEach(e -> {
          System.out.println(e.toString());
          if (e instanceof ResourceUnauthorizedProblem) {
            System.out.println(
                ((ResourceUnauthorizedProblem) e).getTitle() + " " + ((ResourceUnauthorizedProblem) e).getDetail());
          }
        });
      } else {
        System.out.println("findTweetById - Tweet Text: " + result.toString());
      }
    } catch (ApiException e) {
      System.err.println("Status code: " + e.getCode());
      System.err.println("Reason: " + e.getResponseBody());
      System.err.println("Response headers: " + e.getResponseHeaders());
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}

